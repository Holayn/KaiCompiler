var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var TSC;
(function (TSC) {
    /**
     * Implementation of a Tree to represent the CST generated by the Parser
     */
    var Tree = /** @class */ (function () {
        function Tree() {
            this.curr = null;
            this.root = null;
        }
        /**
         * Adds non-terminal node
         */
        Tree.prototype.addNTNode = function (production) {
            var node = new NonTerminalTreeNode(production);
            console.log(node);
            console.log(production);
            if (this.root == null) {
                this.root = node;
                this.curr = node;
                return;
            }
            // set parent
            node.parent = this.curr;
            // add to children of curr node
            this.curr.children.push(node);
            this.descendTree();
        };
        /**
         * Adds terminal node
         */
        Tree.prototype.addTNode = function (token) {
            var node = new TerminalTreeNode(token);
            if (this.root == null) {
                this.root = node;
                this.curr = node;
                return;
            }
            // set parent
            node.parent = this.curr;
            // add to children of curr node
            this.curr.children.push(node);
            this.descendTree();
        };
        /**
         * Sets current node to look at as the latest child
         */
        Tree.prototype.descendTree = function () {
            if (this.curr == null) {
                return;
            }
            var latestChild = this.curr.children[this.curr.children.length - 1];
            this.curr = latestChild;
        };
        /**
         * Sets current node to look at as the parent of the current node
         */
        Tree.prototype.ascendTree = function () {
            this.curr = this.curr.parent;
        };
        return Tree;
    }());
    TSC.Tree = Tree;
    /**
     * Implementation of a TreeNode that makes up a Tree
     */
    var TreeNode = /** @class */ (function () {
        function TreeNode(value) {
            // the children this node points to
            this.children = [];
            this.value = value;
        }
        return TreeNode;
    }());
    TSC.TreeNode = TreeNode;
    /**
     * A TreeNode that represents NonTerminals
     */
    var NonTerminalTreeNode = /** @class */ (function (_super) {
        __extends(NonTerminalTreeNode, _super);
        function NonTerminalTreeNode() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NonTerminalTreeNode.prototype["super"] = function (value) {
            this.value = value;
        };
        return NonTerminalTreeNode;
    }(TreeNode));
    TSC.NonTerminalTreeNode = NonTerminalTreeNode;
    /**
     * A TreeNode that represents Terminals
     */
    var TerminalTreeNode = /** @class */ (function (_super) {
        __extends(TerminalTreeNode, _super);
        function TerminalTreeNode() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TerminalTreeNode.prototype["super"] = function (value) {
            this.value = value;
        };
        return TerminalTreeNode;
    }(TreeNode));
    TSC.TerminalTreeNode = TerminalTreeNode;
})(TSC || (TSC = {}));
