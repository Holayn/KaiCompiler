/**
 * This is the parser, which takes the tokens generated by the lexer
 * and validates their ordering with the provided grammar.
 * Produces a CST.
 * Traverse inorder DFS.
 * Top-down recursive descent parser on an LL(1) grammar.
 */

module TSC {
    export class Parser {

        currentToken: number; // the index of the current token we're looking at
        tokenList;

        constructor() {}

        public init(tokens) {
            this.tokenList = tokens;
            // Set current token to the first token in the list
            this.currentToken = 0;
        }

        // ---------------------------- NON-TERMINALS -------------------------------- //
        // Due to the brilliance of JavaScript's short-circuit evaluation, our
        // lives are made way easier. i.e. false && (anything) is false, JS
        // will not eval anything after the first expression if it is false. Bless
        
        public parse(tokens) {
            console.log(tokens);
            this.init(tokens);
            if(this.parseProgram()){
                // do something
            }
        }

        public parseProgram(): boolean {
            if(this.parseBlock() && this.matchToken(TokenType.TEop)){
                return true;
            }
            return false;
        }

        public parseBlock(): boolean {
            if(this.matchToken(TokenType.TLbrace) && this.parseStatementList() && this.matchToken(TokenType.TRbrace)){
                return true;
            }
            return false;
        }

        public parseStatementList() {
            if(this.parseStatement() && this.parseStatementList()){
                console.log("jesus christ it's jesus christ");
                return true;
            }
            // epsilon... return to parseBlock
            else{
                console.log("jesus christ it's jason bourne");
                return true;
            }
        }

        public parseStatement() {
            if(this.parsePrintStatement() || this.parseAssignmentStatement() || this.parseVarDecl() || this.parseWhileStatement() || this.parseIfStatement() || this.parseBlock()){
                return true;
            }
            return false;
        }

        public parsePrintStatement() {
            if(this.matchToken(TokenType.TPrint) && this.matchToken(TokenType.TLparen) && this.parseExpr() && this.matchToken(TokenType.TRparen)){
                return true;
            }
            return false;
        }

        public parseAssignmentStatement() {
            if(this.parseId() && this.matchToken(TokenType.TAssign) && this.parseExpr()){
                return true;
            }
            return false;
        }

        public parseVarDecl() {
            if(this.matchToken(TokenType.TType) && this.parseId()){
                return true;
            }
            return false;
        }

        public parseWhileStatement() {
            if(this.matchToken(TokenType.TWhile) && this.parseBooleanExpr() && this.parseBlock()){
                return true;
            }
            return false;
        }

        public parseIfStatement() {
            if(this.matchToken(TokenType.TIf) && this.parseBooleanExpr() && this.parseBlock()){
                return true;
            }
            return false;
        }

        public parseExpr() {
            if(this.parseIntExpr() || this.parseStringExpr() || this.parseBooleanExpr() || this.parseId()){
                return true;
            }
            return false;
        }

        public parseIntExpr() {
            if(this.matchToken(TokenType.TDigit) && this.matchToken(TokenType.TIntop) && this.parseExpr()){
                return true;
            }
            else if(this.matchToken(TokenType.TDigit)){
                return true;
            }
            return false;
        }

        public parseStringExpr() {
            if(this.matchToken(TokenType.TQuote) && this.parseCharList() && this.matchToken(TokenType.TQuote)){
                return true;
            }
            return false;
        }

        public parseBooleanExpr() {
            if(this.matchToken(TokenType.TLparen) && this.parseExpr() && this.matchToken(TokenType.TBoolop) && this.parseExpr() && this.matchToken(TokenType.TRparen)){
                return true;
            }
            else if(this.matchToken(TokenType.TBoolval)){
                return true;
            }
            return false;
        }

        public parseId() {
            if(this.matchToken(TokenType.TChar)){
                return true;
            }
            return false;
        }

        public parseCharList() {
            // spaces are treated as chars for me
            if(this.matchToken(TokenType.TChar) && this.parseCharList()){
                return true;
            }
            else{
                // epsilon
                return true;
            }
        }



        // ---------------------------- TERMINALS -------------------------------- //
        // if next token we're looking at match to a terminal symbol, advance the current token
        // if error, break out of parse

        // Screw duplicated code
        public matchToken(token: TokenType) {
            if(this.tokenList[this.currentToken].type == token){
                this.currentToken++;
                return true;
            }
            return false;
        }
    }
}